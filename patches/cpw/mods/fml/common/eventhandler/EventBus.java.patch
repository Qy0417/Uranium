--- ../src-base/minecraft/cpw/mods/fml/common/eventhandler/EventBus.java
+++ ../src-work/minecraft/cpw/mods/fml/common/eventhandler/EventBus.java
@@ -3,12 +3,15 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.annotation.Nonnull;
 
+import cc.uraniummc.events.UraniumForgeEvent;
+import lombok.val;
 import org.apache.logging.log4j.Level;
 
 import com.google.common.base.Preconditions;
@@ -19,6 +22,10 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.common.MinecraftForge;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.java.PluginClassLoader;
 
 public class EventBus implements IEventExceptionHandler
 {
@@ -52,6 +59,7 @@
         ModContainer activeModContainer = Loader.instance().activeModContainer();
         if (activeModContainer == null)
         {
+            if (target == null || !(target.getClass().getClassLoader() instanceof PluginClassLoader))
             FMLLog.log(Level.ERROR, new Throwable(), "Unable to determine registrant mod for %s. This is a critical error and should be impossible", target);
             activeModContainer = Loader.instance().getMinecraftModContainer();
         }
@@ -129,8 +137,25 @@
         }
     }
 
+    public java.util.HashMap<Class,Integer> mEventStackDeep=new HashMap<Class,Integer>();
+
     public boolean post(Event event)
     {
+        boolean tEnable = MinecraftServer.uraniumConfig.enableEndlessLoopCheck.getValue();
+        if (tEnable && this == MinecraftForge.EVENT_BUS) {
+            // not handle async
+            Class<? extends Event> tClazz = event.getClass();
+            Integer tDeep = this.mEventStackDeep.get(tClazz);
+            if (tDeep != null && tDeep > MinecraftServer.uraniumConfig.endlessLoopCheckDeep.getValue()) {
+                if (event.isCancelable()) {
+                    event.setCanceled(true);
+                    return true;
+                }
+                return false;
+            }
+            this.mEventStackDeep.put(tClazz, tDeep==null?1:++tDeep);
+        }
+
         IEventListener[] listeners = event.getListenerList().getListeners(busID);
         int index = 0;
         try
@@ -144,7 +169,21 @@
         {
             exceptionHandler.handleException(this, event, listeners, index, throwable);
             Throwables.propagate(throwable);
+        } finally {
+            if(tEnable) {
+                Class<? extends Event> tClazz = event.getClass();
+                Integer tCount = this.mEventStackDeep.remove(tClazz);
+                if(tCount!=null){
+                    tCount--;
+                    if(tCount>0) this.mEventStackDeep.put(tClazz, tCount);
+                }
+            }
         }
+        if((MinecraftServer.uraniumConfig.enableBukkitForgeEvent.getValue())&&(!event.isCancelable() || !event.isCanceled())) {
+            val bukkitEvent = new UraniumForgeEvent(event);
+            Bukkit.getServer().getPluginManager().callEvent(bukkitEvent);
+        }
+
         return (event.isCancelable() ? event.isCanceled() : false);
     }
 
